grammar Query

	

	rule subquery
		leading:term andor trailing:term {
			def content
				filter = CompositeFilter.new
				filter.left = leading.content
				filter.operator = andor.text_value
				filter.right = trailing.content
				filter
			end
		}
	end
	
	rule term
		identifier operator value {		
			def content
				filter = ElementaryFilter.new
				filter.field =  elements[0].text_value
				filter.operator =  elements[1].text_value
				filter.value =  elements[2].text_value
				filter
			end
		}
	end
	
	rule identifier
		[a-zA-Z] [a-zA-Z0-9.]*
	end
	
	rule operator
		'=' / '!=' / '>=' / '>' / '<=' / '<'
	end
	
	rule value
  		quotedstring / string
  	end
  	
  	rule quotedstring
		'"' [^"]* '"' {
			def text_value
				elements[1].text_value
			end
		}
	end
	
	rule string
		[a-zA-Z0-9.]+
	end

	rule andor
		[\s]+ logical:('OR' / 'or' / 'AND' / 'and') [\s]+ {
			def text_value
				logical.text_value.upcase
			end
		}
	end	
end
