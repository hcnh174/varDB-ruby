Ext.namespace("nelson");
Ext.namespace("nelson.extjs");
Ext.namespace("nelson.users");
Ext.namespace("nelson.tags");
Ext.namespace("nelson.widgets");
(nelson.Utils=function(){function getWebapp(){var path=window.location.pathname;
var webapp=path.substring(0,path.indexOf("/",1));
return webapp;
}return{webapp:getWebapp(),gotoUrl:function(url,params){var href=this.buildHref(url,params);
document.location.href=href;
},buildHref:function(url,params){var qs=(params)?Ext.urlEncode(params):"";
if(qs!==""){qs="?"+qs;
}return this.webapp+url+qs;
},openWindow:function(url,title,options){title=title||url;
options=options||"scrollbars=1,resizable=1";
var win=window.open(url,title,options);
if(!win){win=window.open("",title,options);
win.location.href=url;
}if(window.focus){win.focus();
}return win;
},info:function(msg){var win=new Ext.ux.window.MessageWindow({title:"Notification",html:msg,origin:{offY:-25,offX:-25},autoHeight:true,iconCls:"icon-info",help:false,hideFx:{delay:1000,mode:"ghost"}});
win.show(Ext.getDoc());
},ajaxRequest:function(url,params,callback){params=params||{};
callback=callback||Ext.emptyFn;
Ext.Ajax.request({url:this.webapp+url,params:params,method:"post",failure:this.onFailure,success:function(response,options){var json=Ext.decode(response.responseText);
callback(json);
}});
},ajaxRequestConfirm:function(message,url,params,callback){Ext.MessageBox.confirm("Confirm",message,function(btn){if(btn!=="yes"){return;
}this.ajaxRequest(url,params,callback);
});
},createSpinner:function(){Ext.DomHelper.append(document.body,{id:"spinner",tag:"div",html:"Loading..."});
Ext.Ajax.on("beforerequest",function(conn,options){Ext.get("spinner").show();
},this);
Ext.Ajax.on("requestcomplete",function(conn,response,options){Ext.get("spinner").hide();
},this);
Ext.Ajax.on("requestexception",function(conn,response,options){Ext.MessageBox.alert("Failed",response.responseText);
Ext.get("spinner").hide();
},this);
},createReloadButton:function(handler){var button=new Ext.Button({tooltip:"Reload",iconCls:"x-tbar-loading",handler:handler});
return button;
},createSelectableTemplate:function(){var template=new Ext.Template('<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} x-selectable {css}" style="{style}" tabIndex="0" {cellAttr}>','<div class="x-grid3-cell-inner x-grid3-col-{id}" {attr}>{value}</div>',"</td>");
return template;
},onFailure:function(response,options){Ext.MessageBox.alert("Failed",response.responseText);
},onFormFailure:function(form,action){switch(action.failureType){case Ext.form.Action.CLIENT_INVALID:Ext.Msg.alert("Failure","Form fields may not be submitted with invalid values");
break;
case Ext.form.Action.CONNECT_FAILURE:Ext.Msg.alert("Failure","Ajax communication failed");
break;
case Ext.form.Action.SERVER_INVALID:Ext.Msg.alert("Failure",action.response.responseText);
}}};
}());
var utils=nelson.Utils;
nelson.users.Login=Ext.extend(Ext.form.FormPanel,{title:"Login",labelWidth:100,url:utils.webapp+"/j_spring_security_check",frame:false,width:300,bodyStyle:"padding:5px 5px 0",defaultType:"textfield",monitorValid:false,iconCls:"login-icon",initComponent:function(){var self=this;
var config={items:[{fieldLabel:"Username",name:"j_username",allowBlank:false,value:this.username},{fieldLabel:"Password",name:"j_password",allowBlank:false,inputType:"password",listeners:{specialkey:function(field,e){if(e.getKey()===e.ENTER){self.submitForm();
}}}},{fieldLabel:"Remember me",name:"_spring_security_remember_me",xtype:"checkbox"}],buttons:[{text:"Login",formBind:true,scope:this,handler:this.submitForm}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.users.Login.superclass.initComponent.apply(this,arguments);
},onRender:function(){nelson.users.Login.superclass.onRender.apply(this,arguments);
this.on("afterlayout",function(){if(this.username){this.getForm().findField("j_password").focus();
}else{this.getForm().findField("j_username").focus();
}},this);
},submitForm:function(){var self=this;
this.getForm().submit({method:"post",waitTitle:"Connecting",waitMsg:"Sending data...",url:utils.webapp+"/j_spring_security_check",success:function(form,action){var json=Ext.decode(action.response.responseText);
var redirect=(!json.redirect)?utils.webapp+"/index.html":json.redirect;
window.location=redirect;
},failure:function(form,action){var json=Ext.decode(action.response.responseText);
Ext.MessageBox.alert("Failed",json.message);
self.getForm().reset();
}});
}});
nelson.extjs.Grid=Ext.extend(Ext.grid.GridPanel,{stripeRows:true,initComponent:function(){nelson.extjs.Grid.superclass.initComponent.apply(this,arguments);
},selectAll:function(){this.getSelectionModel().selectAll();
},unselectAll:function(){this.getSelectionModel().clearSelections();
},invertSelection:function(){var rows=this.getSelectionModel().getSelections();
var indexes=[],index,i;
for(i=0;
i<rows.length;
i++){indexes.push(this.getStore().indexOf(rows[i]));
}this.selectAll();
for(i=0;
i<indexes.length;
i++){index=indexes[i];
this.getSelectionModel().deselectRow(index);
}},getSelectedIds:function(){var rows=this.getSelectionModel().getSelections();
var ids=[],index;
for(index=0;
index<rows.length;
index++){ids.push(rows[index].id);
}return ids;
},getSelectedId:function(){var ids=this.getSelectedIds();
if(ids.length<1){alert("Please select an item");
throw"param";
}if(ids.length>1){alert("Please select only one item");
throw"param";
}return ids[0];
},createSelectMenu:function(){var grid=this;
var menu={text:"Select",enableScrolling:false,menu:{items:[{text:"Select all",handler:function(btn){grid.selectAll();
}},{text:"Unselect all",handler:function(btn){grid.unselectAll();
}},"-",{text:"Invert selection",handler:function(btn){grid.invertSelection();
}}]}};
return menu;
},createPrintButton:function(){return{iconCls:"icon-print",scope:this,handler:this.printHandler};
},printHandler:function(){Ext.ux.GridPrinter.print(this);
},createReloadButton:function(){var self=this;
var button=utils.createReloadButton(function(){self.store.reload();
});
return button;
}});
nelson.extjs.SelectList=Ext.extend(Ext.form.ComboBox,{valueField:"value",displayField:"display",width:150,mode:"local",triggerAction:"all",selectOnFocus:true,forceSelection:true,initComponent:function(){if(!(this.data instanceof Array)){var arr=this.data.split(",");
var index,value,display;
this.data=[];
for(index=0;
index<arr.length;
index++){value=display=arr[index];
if(display===" "){display="&nbsp;";
}this.data.push([value,display]);
}}var config={store:new Ext.data.ArrayStore({fields:[this.valueField,this.displayField],data:this.data})};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.extjs.SelectList.superclass.initComponent.apply(this,arguments);
}});
nelson.tags.ApplyTagDialog=Ext.extend(Ext.Window,{title:"Tag sequences",width:400,closable:true,resizable:true,initComponent:function(){var self=this;
var store=new Ext.data.Store({url:utils.webapp+"/tags/ajax/usertags.json",reader:new Ext.data.JsonReader({root:"tags",totalProperty:"totalCount"},[{name:"id",type:"int"},{name:"name"},{name:"numitems",mapping:"numitems",type:"int"}])});
var tagCombo=new Ext.ux.form.ComboBoxAdd({name:"tag_id",allowBlank:false,store:store,valueField:"id",displayField:"name",fieldLabel:"Tag",typeAhead:true,minChars:0,loadingText:"Loading...",width:249,listWidth:300,emptyText:"Select a tag",resizable:true,listeners:{add:function(e){var dialog=new nelson.tags.NewTagDialog({x:self.getPosition()[0]+30,y:self.getPosition()[1]+30,callback:function(tag){tagCombo.insert(0,tag);
}});
}}});
var form=new Ext.FormPanel({labelWidth:50,url:"",defaults:{allowBlank:true},items:tagCombo,buttons:[{text:"Submit",formBind:true,scope:self,handler:self.submitHandler},{text:"Cancel",scope:self,handler:function(){self.hide();
}}]});
var config={items:[form]};
this.form=form;
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.tags.ApplyTagDialog.superclass.initComponent.apply(this,arguments);
this.show();
},submitHandler:function(){var self=this;
var callback=function(){if(self.grid){self.grid.store.reload();
}self.hide();
};
var tag_id=this.form.getForm().findField("tag_id").getValue();
if(tag_id===""){alert("Please select a tag.");
return;
}if(this.grid){var ids=this.grid.getSelectedIds();
var total=ids.length;
if(total>0){nelson.tags.Tags.tagItemsById(tag_id,ids,callback);
}else{total=this.grid.store.getTotalCount();
var filter=this.grid.store.baseParams.filter;
if(this.grid.list_id){nelson.tags.Tags.tagSequencesByList(tag_id,this.grid.list_id,filter,total,callback);
}else{nelson.tags.Tags.tagSequencesByFilter(tag_id,filter,total,callback);
}}}else{if(this.sequence_id){nelson.tags.Tags.tagItemsById([this.sequence_id]);
}else{throw"no grid or sequence_id is defined in ApplyTagDialog";
}}}});
nelson.tags.NewTagDialog=Ext.extend(Ext.Window,{title:"Create a new tag",width:400,closable:true,resizable:true,initComponent:function(){var nameField={xtype:"textfield",fieldLabel:"Tag",name:"name",value:"",allowBlank:true,validateOnBlur:false,vtype:"alphanum"};
this.form=new Ext.FormPanel({labelWidth:50,url:"",defaults:{width:230,allowBlank:false},monitorValid:true,items:[nameField],buttons:[{text:"Submit",formBind:true,scope:this,handler:this.submitHandler},{text:"Cancel",scope:this,handler:function(){this.hide();
}}]});
var config={items:[this.form]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.tags.NewTagDialog.superclass.initComponent.apply(this,arguments);
this.show();
},submitHandler:function(){var win=this;
var name=this.form.getForm().findField("name").getValue();
var message='Create new tag "'+name+'"?';
utils.ajaxRequestConfirm(message,"/tags/ajax/tags/new.json",{name:name},function(tag){win.hide();
win.callback(tag);
});
}});
nelson.tags.TagCloud=Ext.extend(Ext.Window,{layout:"fit",width:600,height:400,title:"Tag clouds",autoScroll:true,maximizable:true,bodyStyle:"background-color: white; padding: 3px",initComponent:function(){var buffer=[],facet,tag,i,j;
for(i=0;
i<this.tagcloud.facets.length;
i++){facet=this.tagcloud.facets[i];
if(facet.tags.length>0){buffer.push(this.formatFacet(facet));
}}var html=buffer.join("\n");
var config={html:html,buttons:[{text:"Close",scope:this,handler:function(){this.hide();
}}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.tags.TagCloud.superclass.initComponent.apply(this,arguments);
this.show();
},formatFacet:function(facet){var tags=[],tag,index,html;
for(index=0;
index<facet.tags.length;
index++){tag=facet.tags[index];
html='<a href="#" onclick="'+this.formatLink(tag)+'" style="font-size:'+tag.fontsize+'pt;text-decoration:none;">';
html+=tag.name.replace(" ","&nbsp;")+"&nbsp;("+tag.numsequences+")";
html+="</a>";
tags.push(html);
}var buffer=[];
buffer.push('<h2 style="color:#3764A0;border-bottom:2px solid #99BBE8;">'+facet.name+"&nbsp;("+facet.tags.length+" tags)</h2>");
buffer.push(tags.join("&nbsp; "));
buffer.push("<br/><br/>");
return buffer.join("\n");
},formatLink:function(tag){return"nelson.popup('"+tag.resourceType+"','"+tag.identifier+"')";
}});
(nelson.tags.Tags=function(){return{createTagCloud:function(grid){var params={list_id:grid.list_id,filter:grid.store.baseParams.filter};
utils.ajaxRequest("/ajax/lists/tagcloud.json",params,function(tagcloud){var dialog=new nelson.tags.TagCloud({tagcloud:tagcloud});
});
},untagItems:function(grid,callback){var ids=grid.getSelectedIds();
var total=ids.length;
if(total===0){Ext.MessageBox.alert("Warning","No sequences selected");
return;
}var message="Un-tag the selected sequences ("+total+")?";
utils.ajaxRequestConfirm(message,"/tags/ajax/untag.json",{ids:ids.join(",")},callback);
}};
}());
nelson.widgets.SortDialog=Ext.extend(Ext.Window,{title:"Sort",width:300,height:160,closable:true,resizable:true,numsortfields:3,initComponent:function(){if(!this.grid){throw"Grid has not been set";
}if(!this.grid.attributes){throw"Attributes have not been set";
}var sortstate=this.grid.store.getSortState();
if(sortstate===undefined){sortstate={field:"",direction:""};
}var curfields=sortstate.field.split(",");
var curdirs=sortstate.direction.split(",");
var items=[],num,field,dir,container;
for(num=1;
num<=this.numsortfields;
num++){if(curfields.length>=num){field=curfields[num-1];
dir=curdirs[num-1];
}else{field="none";
dir="ASC";
}container={layout:"column",border:false,items:[{layout:"form",width:200,items:this.createSortField("sort"+num,field)},{layout:"form",columnWidth:1,items:this.createDirectionField("dir"+num,dir)}]};
items.push(container);
}this.form=new Ext.FormPanel({labelWidth:45,autoHeight:true,frame:true,items:items});
var config={defaults:{split:true},items:[this.form],buttons:[{text:"Sort",formBind:true,scope:this,handler:this.submitHandler}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.widgets.SortDialog.superclass.initComponent.apply(this,arguments);
this.show();
},submitHandler:function(){var form=this.form.getForm();
if(!form.isValid()){return;
}var fields=[];
var dirs=[];
var num;
for(num=1;
num<=this.numsortfields;
num++){var field=form.findField("sort"+num).getValue();
var dir=form.findField("dir"+num).getValue();
if(field!=="none"){fields.push(field);
dirs.push(dir);
}}this.grid.store.setDefaultSort(fields.join(","),dirs.join(","));
this.grid.store.reload();
this.close();
},createSortField:function(name,value){var data=[];
Ext.each(this.grid.attributes.rows,function(item,index,allItems){data.push([item.id,item.id]);
},this);
return new nelson.extjs.SelectList({data:data,name:name,fieldLabel:"Sort by",value:value});
},createDirectionField:function(name,value){return new nelson.extjs.SelectList({data:[["ASC","Asc"],["DESC","Desc"]],name:name,fieldLabel:"Direction",value:value,width:50,hideLabel:true,labelSeparator:""});
}});
nelson.widgets.SelectColumnsDialog=Ext.extend(Ext.Window,{title:"Select columns",width:560,closable:true,resizable:true,initComponent:function(){var self=this;
if(!this.grid){throw"Grid has not been set";
}if(!this.grid.attributes){throw"Attributes have not been set";
}this.curColumns=self.grid.store.baseParams.columns.split(",");
var storeConfig={root:"rows",idProperty:"id",fields:["id","tagtype_id","name","description","type","hidden"]};
var store1=new Ext.data.JsonStore(storeConfig);
var store2=new Ext.data.JsonStore(storeConfig);
var attributes={rows:[]};
var selected={rows:[]};
Ext.each(this.grid.attributes.rows,function(item,index,allItems){if(self.isSelected(item.id)){selected.rows.push(item);
}else{attributes.rows.push(item);
}},this);
store1.loadData(attributes);
store2.loadData(selected);
this.form=new Ext.form.FormPanel({bodyStyle:"padding:10px;",items:[{xtype:"itemselector",name:"itemselector",hideLabel:true,imagePath:"/hdb/images/extjs/itemselector/",multiselects:[{width:250,height:200,store:store1,displayField:"id",valueField:"id"},{width:250,height:200,store:store2,displayField:"id",valueField:"id",tbar:[{text:"Clear",formBind:true,scope:this,handler:this.resetHandler}]}]}]});
var config={items:this.form,buttons:[{text:"Submit",formBind:true,scope:this,handler:this.submitHandler},{text:"Close",formBind:true,scope:this,handler:this.closeHandler}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.widgets.SelectColumnsDialog.superclass.initComponent.apply(this,arguments);
this.show();
},isSelected:function(id){var self=this;
var selected=false;
Ext.each(self.curColumns,function(item,index,allItems){if(item===id){selected=true;
return false;
}},this);
return selected;
},resetHandler:function(){this.form.getForm().findField("itemselector").reset();
},submitHandler:function(){var form=this.form.getForm();
if(!form.isValid()){return;
}var cols=form.findField("itemselector").getValue();
if(cols===""){Ext.Msg.alert("Alert","Please select at least one column");
return;
}this.grid.updateColumns(cols);
this.close();
},closeHandler:function(){this.hide();
}});
