Ext.namespace("nelson.vardb");
Ext.namespace("nelson.vardb.widgets");
Ext.namespace("nelson.vardb.popups");
(nelson.vardb.Vardb=function(){var webapp=utils.webapp;
Ext.BLANK_IMAGE_URL=webapp+"/images/extjs/s.gif";
Ext.ux.GridPrinter.stylesheetPath=webapp+"/css/printgrid.css";
Ext.Ajax.timeout=600000;
return{webapp:utils.webapp,chartswf:this.webapp+"/images/extjs/charts.swf",onReady:function(){Ext.QuickTips.init();
utils.createSpinner();
Ext.ux.Lightbox.register("a[rel^=lightbox]");
//Ext.Direct.addProvider(VardbDirect);
},getTerm:function(identifier){VardbDirect.term(identifier,function(provider,response){var popup=new nelson.vardb.popups.TermPopup({term:response.result});
});
}};
}());
var vardb=nelson.vardb.Vardb;
nelson.vardb.widgets.CommentWindow=Ext.extend(Ext.Window,{title:"Enter a comment",closable:true,resizable:true,bodyStyle:"padding: 0",layout:"fit",iconCls:"icon-user_comment",initComponent:function(){var commentField={xtype:"htmleditor",id:"comment-window-text-htmleditor",hideLabel:true,name:"text",anchor:"0",enableAlignments:false};
var form=new Ext.form.FormPanel({collapsible:false,frame:false,width:500,height:150,bodyStyle:"padding: 0",items:[commentField],buttons:[{id:"vardb-comment-window-clear-btn",text:"Clear",formBind:true,scope:this,handler:function(){this.form.getForm().reset();
}},{id:"vardb-comment-window-submit-btn",text:"Submit",formBind:true,scope:this,handler:this.submitComment}]});
var config={items:form};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.CommentWindow.superclass.initComponent.apply(this,arguments);
this.form=form;
this.show();
},submitComment:function(){var self=this;
var value=this.form.getForm().findField("text").getValue().trim();
this.form.getForm().findField("text").setValue(value);
this.form.getForm().submit({method:"post",waitTitle:"Connecting",waitMsg:"Submitting comment...",url:vardb.webapp+"/ajax/comments/submit.json",params:{type:self.type,identifier:self.identifier},failure:utils.onFailure,success:function(form,action){var json=Ext.decode(action.response.responseText);
if(self.callback){self.callback();
}self.close();
Ext.MessageBox.alert("Success","Your comment was successfully submitted");
}});
}});
nelson.vardb.widgets.Comments=Ext.extend(Ext.Panel,{width:"600",autoScroll:true,pagesize:5,iconCls:"icon-user_comment",initComponent:function(){var self=this;
if(!this.type){throw"nelson.vardb.widgets.Comments: type not set";
}if(!this.identifier){throw"nelson.vardb.widgets.Comments: identifier not set";
}var reader=new Ext.data.JsonReader({root:"comments",totalProperty:"totalCount",idProperty:"id",fields:[{name:"id",type:"int"},{name:"username"},{name:"type"},{name:"identifier"},{name:"text"},{name:"date"}]});
var store=new Ext.data.Store({url:vardb.webapp+"/ajax/comments.json",reader:reader,remoteSort:true,sortInfo:{field:"date",direction:"DESC"},baseParams:{type:this.type,identifier:this.identifier}});
var resultTpl=new Ext.XTemplate('<tpl for="."><div class="comment-item"><tpl if="username!=\'system\'"><h3><span>{date:date("M j, Y, g:i A")}<br /></span><a href="javascript:void(0)">{username} wrote:</a></h3></tpl><p>{text}</p></div></tpl>');
var addButton=new Ext.Button({id:"vardb-comments-submit-btn",text:"Submit a comment",scope:this,handler:this.submitHandler});
var config={items:new Ext.DataView({tpl:resultTpl,store:store,itemSelector:"div.comment-item",emptyText:'<div class="comment-item"><p style="margin-top:5px;margin-bottom:5px;">No comments have been submitted for this item.</p></div>'}),tbar:new Ext.Toolbar({items:['<span class="comments-heading">User comments</span>',"->","-",addButton]}),bbar:new Ext.PagingToolbar({pageSize:this.pagesize,store:store,displayInfo:true,displayMsg:"{0} - {1} of {2}",emptyMsg:""})};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.Comments.superclass.initComponent.apply(this,arguments);
store.load({params:{start:0,limit:this.pagesize}});
this.store=store;
},submitHandler:function(){var self=this;
var win=new nelson.vardb.widgets.CommentWindow({type:self.type,identifier:self.identifier,callback:function(){self.store.reload();
}});
}});
nelson.vardb.widgets.FeedbackForm=Ext.extend(Ext.form.FormPanel,{title:"Please use the form below to send your comments or suggestions to varDB. ",labelWidth:75,frame:true,width:550,bodyStyle:"padding: 5px 5px 0",defaultType:"textfield",monitorValid:true,iconCls:"icon-email",initComponent:function(){var purposeCombo=new nelson.extjs.SelectList({data:[["COMMENT","Comment"],["QUESTION","Question"],["CORRECTION","Correction"],["SUBMISSION","Submission"]],name:"purpose",fieldLabel:"Purpose",value:this.purpose});
var config={defaults:{width:350,allowBlank:true},items:[{fieldLabel:"Name",name:"name",value:this.name},{fieldLabel:"Affiliation",name:"affiliation",value:this.affiliation},{fieldLabel:"Email*",name:"email",vtype:"email",allowBlank:false,value:this.email},purposeCombo,{fieldLabel:"Comments*",name:"comments",xtype:"textarea",allowBlank:false,grow:true}],buttons:[{text:"Submit",formBind:true,scope:this,handler:this.submitHandler},{text:"Reset",scope:this,handler:function(){this.getForm().reset();
}}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.FeedbackForm.superclass.initComponent.apply(this,arguments);
},submitHandler:function(){if(!this.getForm().isValid()){return;
}this.getForm().getEl().dom.action=vardb.webapp+"/contact.html";
this.getForm().getEl().dom.method="post";
this.getForm().getEl().dom.submit();
}});
nelson.vardb.widgets.Navigation=Ext.extend(Ext.util.Observable,{constructor:function(config){Ext.applyIf(config,{cur:"none"});
var tpl=new Ext.XTemplate('<tpl for="sections">',"<h5>{label}</h5>","<ul>",'<tpl for="links">','<li <tpl if="name==this.cur">class="current"</tpl>>','<a href="{vardb.webapp}/{href}" title="{tooltip}">{[this.replaceSpaces(values.label)]}</a>',"</li>","</tpl>","</ul>","</tpl>","<h5>&nbsp;</h5>",{cur:config.cur,replaceSpaces:function(value){return value.split(" ").join("&nbsp;");
}});
if(Ext.get(config.renderTo)!==null&&config.data!==null){tpl.overwrite(config.renderTo,config.data);
}nelson.vardb.widgets.Navigation.superclass.constructor.call(this,config);
}});
nelson.vardb.widgets.MainMenu=Ext.extend(Ext.Toolbar,{height:25,anonymous:true,admin:false,initComponent:function(){var config={defaults:{enableScrolling:false},items:[this.createHomepageMenu(),"-",this.createResourceMenu(),"-",this.createBlastMenu(),"-",this.createToolMenu(),"-",this.createUserMenu(),"-",this.createAdminMenu(),"->",this.createSearchSelect(),this.createSearchTextBox(),"-",this.createSearchButton()]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.MainMenu.superclass.initComponent.apply(this,arguments);
},createHomepageMenu:function(){var menu={text:"Homepage",handler:function(){utils.gotoUrl("/homepage.html");
}};
return menu;
},createResourceMenu:function(){var menu={text:"Resources",enableScrolling:false,menu:{items:[{text:"Pathogens",handler:function(){utils.gotoUrl("/pathogens.html");
}},{text:"Families",handler:function(){utils.gotoUrl("/families.html");
}},{text:"Diseases",handler:function(){utils.gotoUrl("/diseases.html");
}},{text:"Pfam motifs",handler:function(){utils.gotoUrl("/pfams.html");
}},{text:"Structures",handler:function(){utils.gotoUrl("/structures.html");
}},{text:"Genomes",handler:function(){utils.gotoUrl("/genomes.html");
}},{text:"Map",handler:function(){utils.gotoUrl("/search/map.html");
}},{text:"Alignments",handler:function(){utils.gotoUrl("/alignments.html");
}},{text:"Clinical data",handler:function(){utils.gotoUrl("/bundles.html");
}},"-",{text:"Tutorials",handler:function(){utils.gotoUrl("/tutorials.html");
}},{text:"Antigenic variation",handler:function(){utils.gotoUrl("/antigenicvariation.html");
}},{text:"Database construction",handler:function(){utils.gotoUrl("/database.html");
}},{text:"Terms",handler:function(){utils.gotoUrl("/terms.html");
}},{text:"Links",handler:function(){utils.gotoUrl("/links.html");
}},{text:"Images",handler:function(){utils.gotoUrl("/images.html");
}},{text:"References",handler:function(){utils.gotoUrl("/references.html");
}}]}};
return menu;
},createBlastMenu:function(){var menu={text:"BLAST",menu:{items:[{text:"PSI",handler:function(){utils.gotoUrl("/blast/blast.html");
}},{text:"PSI-BLAST",handler:function(){utils.gotoUrl("/blast/psiblast.html");
}},{text:"PHI-BLAST",handler:function(){utils.gotoUrl("/blast/phiblast.html");
}},{text:"Netblast",handler:function(){utils.gotoUrl("/analysis/netblast.html");
}}]}};
return menu;
},createToolMenu:function(){var menu={text:"Tools",menu:{items:[{text:"Search sequences",handler:function(){utils.gotoUrl("/search/sequences.html");
}},{text:"PROSITE/regex search",handler:function(){utils.gotoUrl("/regex/search.html");
}},{text:"MAFFT alignment tool",handler:function(){utils.gotoUrl("/mafft.html");
}},{text:"Alignment viewer",handler:function(){utils.gotoUrl("/alignments/view.html");
}},{text:"Create a codon alignment",handler:function(){utils.gotoUrl("/analysis/codonalign.html");
}},{text:"Gblocks",handler:function(){utils.gotoUrl("/analysis/gblocks.html");
}},{text:"Analyze variability",handler:function(){utils.gotoUrl("/analysis/variability.html");
}}]}};
return menu;
},createUserMenu:function(){var items=[];
if(this.anonymous){items.push({text:"New account",handler:function(){utils.gotoUrl("/newuser.html");
}});
items.push({text:"Login",handler:function(){utils.gotoUrl("/login.html");
}});
}else{items.push({text:"Logout",handler:function(){utils.gotoUrl("/logout.html");
}});
items.push({text:"Edit user information",handler:function(){utils.gotoUrl("/edituser.html");
}});
items.push({text:"Change password",handler:function(){utils.gotoUrl("/changepassword.html");
}});
items.push({text:"Contact us",handler:function(){utils.gotoUrl("/contact.html");
}});
}items.push("-");
items.push({text:"Explorer",handler:function(){utils.gotoUrl("/explorer.html");
}});
items.push("-");
items.push({text:"My searches",handler:function(){utils.gotoUrl("/user/searches.html");
}});
items.push({text:"My analyses",handler:function(){utils.gotoUrl("/user/analyses.html");
}});
items.push({text:"My sequences",handler:function(){utils.gotoUrl("/user/sequences.html");
}});
items.push({text:"My alignments",handler:function(){utils.gotoUrl("/user/alignments.html");
}});
var menu={text:"User",menu:{items:items}};
return menu;
},createAdminMenu:function(){if(!this.admin){return"";
}var menu={text:"Admin",menu:{items:[{text:"Admin page",handler:function(){utils.gotoUrl("/admin/index.html");
}},{text:"Update XML",handler:function(){utils.gotoUrl("/admin/setup.html");
}},{text:"Update sequences",handler:function(){utils.gotoUrl("/admin/load/table.html");
}},{text:"Update counts",handler:function(){utils.gotoUrl("/admin/update/counts.html");
}},{text:"Clear cache",handler:function(){utils.gotoUrl("/admin/cache/clear.html");
}},{text:"Users",handler:function(){utils.gotoUrl("/admin/users.html");
}}]}};
return menu;
},createSearchSelect:function(){var combo=new Ext.form.ComboBox({store:new Ext.data.ArrayStore({fields:["value","display"],data:[["SEQUENCES","Sequences"],["GOOGLE","Google"]]}),itemId:"searchtype",hiddenName:"type",valueField:"value",displayField:"display",width:110,mode:"local",triggerAction:"all",value:"SEQUENCES",selectOnFocus:true,forceSelection:true});
return combo;
},createSearchTextBox:function(){var self=this;
var store=new Ext.data.Store({url:vardb.webapp+"/search/ajax/suggestions.json",reader:new Ext.data.JsonReader({root:"results",totalProperty:"totalCount",idProperty:"keyword"},[{name:"keyword",mapping:"keyword"},{name:"type",mapping:"type"},{name:"identifier",mapping:"identifier"}]),baseParams:{limit:20}});
var combo=new Ext.form.ComboBox({itemId:"searchtextbox",store:store,minChars:2,displayField:"keyword",loadingText:"Searching...",width:150,listWidth:200,hideTrigger:true,emptyText:"Search...",queryDelay:800,forceSelection:false,foundMatch:false,listeners:{select:function(field,record,index){this.foundMatch=true;
},specialkey:function(field,e){if(e.getKey()===e.ENTER&&this.foundMatch){self.submitSearchHandler();
}}}});
return combo;
},createSearchButton:function(){var button=new Ext.Button({text:"Go",width:32,scope:this,handler:this.submitSearchHandler});
return button;
},submitSearchHandler:function(){var value=this.getComponent("searchtextbox").getValue().trim();
var type=this.getComponent("searchtype").getValue().trim();
if(value===""){return;
}var form=document.forms.searchform;
form.elements.query.value=value;
if(type==="SEQUENCES"){if(value.indexOf(" ")!==-1){form.elements.query.value='"'+value+'"';
}}else{if(type==="GOOGLE"){form.action=vardb.webapp+"/search/google.html";
}else{throw"unsupported search type: "+type;
}}form.submit();
}});
nelson.vardb.widgets.Announcements=Ext.extend(Ext.grid.GridPanel,{title:"Announcements",enableHdMenu:false,hideHeaders:true,stripeRows:true,frame:true,height:200,width:"95%",loadingText:"Loading announcements...",emptyText:"No new announcements",iconCls:"icon-rss",initComponent:function(){var fields=[{name:"title"},{name:"author"},{name:"pubDate",type:"date"},{name:"link"},{name:"description"},{name:"content"}];
var expander=new Ext.ux.grid.RowExpander({tpl:new Ext.Template("<p>{description}</p>")});
var store=new Ext.data.Store({url:vardb.webapp+"/ajax/announcements.xml",reader:new Ext.data.XmlReader({record:"item"},fields),sortInfo:{field:"pubDate",direction:"DESC"}});
store.on("load",function(){expander.expandRow(0);
});
store.load();
var config={store:store,viewConfig:{forceFit:true},columns:[expander,{header:"Title",sortable:true,dataIndex:"title",width:250,renderer:this.renderTitle},{header:"Date",dataIndex:"pubDate",width:50,renderer:Ext.util.Format.dateRenderer("M j, Y")},{header:"Link",dataIndex:"link",width:20,renderer:this.renderLink}],plugins:expander,bbar:new Ext.PagingToolbar({pageSize:1,store:store,displayInfo:true,displayMsg:"Displaying news {0} - {1} of {2}",emptyMsg:"No news to display"})};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.Announcements.superclass.initComponent.apply(this,arguments);
},renderTitle:function(value,p,record){return"<span style='color: #15428b; font:bold 11px tahoma,arial,sans-serif;'>"+record.data.title+"</span>";
},renderLink:function(value,p,record){var link=""+value;
if(link.length>0){return"<a href='"+link+"'>Link</a>";
}return link;
}});
nelson.vardb.widgets.BrowseByCategory=Ext.extend(Ext.FormPanel,{labelWidth:100,frame:false,title:"Browse by category",bodyStyle:"padding:5px 5px 0",width:"95%",iconCls:"icon-chart_organisation",initComponent:function(){this.ntsequenceCount=new Ext.Toolbar.TextItem("DNA sequences: "+this.data.statistics.ntsequences);
this.aasequenceCount=new Ext.Toolbar.TextItem("Protein sequences: "+this.data.statistics.aasequences);
var statusbar=new Ext.Toolbar({items:["->",this.ntsequenceCount," ",this.aasequenceCount]});
var config={defaults:{width:350},bbar:statusbar,items:[this.comboList(this.data.families,"Gene families","family"),this.comboList(this.data.pathogens,"Pathogens","pathogen"),this.comboList(this.data.diseases,"Diseases","disease")]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.widgets.BrowseByCategory.superclass.initComponent.apply(this,arguments);
this.on("afterrender",function(){this.ntsequenceCount.addClass("custom-status-text-panel");
this.aasequenceCount.addClass("custom-status-text-panel");
},this);
},comboList:function(data,fieldLabel,type){var combo=new Ext.form.ComboBox({store:new Ext.data.JsonStore({fields:["identifier","name"],data:data}),valueField:"identifier",displayField:"name",mode:"local",triggerAction:"all",emptyText:(data.length-1)+" "+fieldLabel.toLowerCase(),forceSelection:true,fieldLabel:fieldLabel,typeAhead:true,onSelect:function(record){if(type==="family"){if(record.data.identifier==="families"){utils.gotoUrl("/families.html");
}else{utils.gotoUrl("/families/"+record.data.identifier+".html");
}}else{if(type==="pathogen"){if(record.data.identifier==="pathogens"){utils.gotoUrl("/pathogens.html");
}else{utils.gotoUrl("/pathogens/"+record.data.identifier+".html");
}}else{if(type==="disease"){if(record.data.identifier==="diseases"){utils.gotoUrl("/diseases.html");
}else{utils.gotoUrl("/diseases/"+record.data.identifier+".html");
}}}}}});
return combo;
}});
nelson.vardb.popups.TermPopup=Ext.extend(Ext.Window,{layout:"fit",width:400,height:250,plain:true,title:"Definition",initComponent:function(){var self=this;
var config={items:new Ext.TabPanel({activeTab:0,deferredRender:false,border:false,items:[{title:this.term.term,html:this.term.definition,autoScroll:true}]}),buttons:[{text:"Close",handler:function(){self.hide();
}}]};
Ext.apply(this,Ext.apply(this.initialConfig,config));
nelson.vardb.popups.TermPopup.superclass.initComponent.apply(this,arguments);
this.show();
}});
